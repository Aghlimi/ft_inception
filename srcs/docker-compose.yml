version: '3.8'

services:
  nginx:
    container_name: nginx
    image: nginx  
    build: 
      context: requirements/nginx
      dockerfile: Dockerfile
    ports:
      - "443:443"
    networks:
      - inception
    restart: always
    volumes:
      - wp-content:/var/www/html
    environment:
      WORDPRESS_DOMAIN: ${WORDPRESS_DOMAIN}
      C:  ${C}
      ST: ${ST}
      L:  ${L}
      O:  ${O}

  mariadb:
    container_name: mariadb
    image: mariadb
    build: 
      context: requirements/mariadb
      dockerfile: Dockerfile
    user: root
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_PORT: ${WORDPRESS_DB_PORT}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - inception
    restart: always

  wordpress:
    container_name: wordpress
    image: wordpress
    build: 
      context: requirements/wordpress
      dockerfile: Dockerfile
    environment:
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_PORT: ${WORDPRESS_DB_PORT}
      WORDPRESS_ADMIN_USER: ${WORDPRESS_ADMIN_USER}
      WORDPRESS_ADMIN_PASSWORD: ${WORDPRESS_ADMIN_PASSWORD}
      WORDPRESS_ADMIN_EMAIL: ${WORDPRESS_ADMIN_EMAIL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_MAXTTL: ${REDIS_MAXTTL}
      WORDPRESS_USER_USER: ${WORDPRESS_USER_USER}
      WORDPRESS_USER_EMAIL: ${WORDPRESS_USER_EMAIL}
      WORDPRESS_USER_PASSWORD: ${WORDPRESS_USER_PASSWORD}
      WORDPRESS_DOMAIN: ${WORDPRESS_DOMAIN}
    depends_on:
      - mariadb
      - nginx
    volumes:
      - wp-content:/var/www/html
    restart: always
    networks:
      - inception

  adminer:
    container_name: adminer
    image: adminer
    build: 
      context: requirements/bonus/adminer
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - inception
    restart: always

  redis:
    container_name: redis
    image: redis
    build: 
      context: requirements/bonus/redis
      dockerfile: Dockerfile
    networks:
      - inception
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_MAXTTL: ${REDIS_MAXTTL}
    restart: always

  ftp:
    container_name: ftp
    image: ftp
    build: 
      context: requirements/bonus/ftp
      dockerfile: Dockerfile
    ports:
      - "21:21"
    environment:
      FTP_USER_NAME: ${FTP_USER_NAME}
      FTP_USER_PASS: ${FTP_USER_PASS}
      FTP_USER_HOME: ${FTP_USER_HOME}
    volumes:
      - wp-content:${FTP_USER_HOME}
    depends_on:
      - wordpress
    networks:
      - inception
    restart: always

  website:
    container_name: website
    image: website
    build: 
      context: requirements/bonus/website
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    restart: always
    environment:
      WORDPRESS_DB_PORT: ${WORDPRESS_DB_PORT}
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
    networks:
      - inception
    depends_on:
      - mariadb

  service:
    container_name: service
    image: service
    build: 
      context: requirements/bonus/service
      dockerfile: Dockerfile
    restart: always
    networks:
      - inception
    depends_on:
      - wordpress
      - website
      - mariadb
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
    volumes:
      - backup:/backup

networks:
  inception:
    driver: bridge

volumes:
  wp-content:
    driver_opts:
      type: none
      device: ${HOST_HOME}/data/wp-content
      o: bind
  db-data:
    driver_opts:
      type: none
      device: ${HOST_HOME}/data/db-data
      o: bind
  backup:
    driver_opts:
      type: none
      device: ${HOST_HOME}/data/backup
      o: bind